// server/services/gemini.service.js
// Este archivo maneja la integraci√≥n con Google Gemini AI

import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

dotenv.config();

// Inicializar Gemini con tu API Key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// üé® Generar descripci√≥n mejorada de un perro usando IA
const generateDogDescription = async (dogData) => {
  try {
    console.log('ü§ñ Generando descripci√≥n con Gemini...');
    
    // Usar el modelo de texto de Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    const prompt = `
      Genera una descripci√≥n atractiva y emotiva en espa√±ol para un perro en adopci√≥n con estos datos:
      - Nombre: ${dogData.name}
      - Raza: ${dogData.breed || 'Mestizo'}
      - Edad: ${dogData.age || 'Desconocida'}
      - Tama√±o: ${dogData.size || 'Mediano'}
      
      La descripci√≥n debe ser c√°lida, invitar a la adopci√≥n y resaltar las cualidades del perro.
      M√°ximo 3 p√°rrafos.
    `;
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Descripci√≥n generada exitosamente');
    return {
      success: true,
      description: text
    };
    
  } catch (error) {
    console.error('‚ùå Error al generar descripci√≥n:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// üé® Generar sugerencias de necesidades para un perro
const generateNeedsSuggestions = async (dogData) => {
  try {
    console.log('ü§ñ Generando sugerencias de necesidades con Gemini...');
    
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    const prompt = `
      Bas√°ndote en este perro:
      - Nombre: ${dogData.name}
      - Raza: ${dogData.breed || 'Mestizo'}
      - Edad: ${dogData.age || 'Desconocida'}
      - Tama√±o: ${dogData.size || 'Mediano'}
      
      Sugiere 5 necesidades importantes que este perro podr√≠a tener.
      Formato: solo lista con vi√±etas, nombres cortos y espec√≠ficos.
      Ejemplo: "Vacuna antirr√°bica", "Alimento premium", etc.
    `;
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Sugerencias generadas exitosamente');
    return {
      success: true,
      suggestions: text
    };
    
  } catch (error) {
    console.error('‚ùå Error al generar sugerencias:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// üé® Generar recomendaciones de accesorios
const generateAccessoryRecommendations = async (dogData) => {
  try {
    console.log('ü§ñ Generando recomendaciones de accesorios con Gemini...');
    
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    const prompt = `
      Para un perro con estas caracter√≠sticas:
      - Tama√±o: ${dogData.size || 'Mediano'}
      - Edad: ${dogData.age || 'Adulto'}
      - Raza: ${dogData.breed || 'Mestizo'}
      
      Recomienda 6 accesorios esenciales que necesitar√≠a.
      Formato: lista simple separada por comas.
      Ejemplo: "Collar ajustable, Correa de 1.5m, Plato de acero inoxidable"
    `;
    
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ Recomendaciones generadas exitosamente');
    return {
      success: true,
      recommendations: text
    };
    
  } catch (error) {
    console.error('‚ùå Error al generar recomendaciones:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

export default {
  generateDogDescription,
  generateNeedsSuggestions,
  generateAccessoryRecommendations
};